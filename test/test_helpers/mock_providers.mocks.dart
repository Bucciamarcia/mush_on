// Mocks generated by Mockito 5.4.6 from annotations
// in mush_on/test/test_helpers/mock_providers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:mush_on/create_team/models.dart' as _i11;
import 'package:mush_on/create_team/provider.dart' as _i10;
import 'package:mush_on/provider.dart' as _i4;
import 'package:mush_on/services/error_handling.dart' as _i5;
import 'package:mush_on/services/models.dart' as _i6;
import 'package:mush_on/services/models/settings/settings.dart' as _i2;
import 'package:mush_on/services/models/tasks.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsModel_0 extends _i1.SmartFake implements _i2.SettingsModel {
  _FakeSettingsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasksInMemory_1 extends _i1.SmartFake implements _i3.TasksInMemory {
  _FakeTasksInMemory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMainProvider_2 extends _i1.SmartFake implements _i4.MainProvider {
  _FakeMainProvider_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBasicLogger_3 extends _i1.SmartFake implements _i5.BasicLogger {
  _FakeBasicLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamGroup_4 extends _i1.SmartFake implements _i6.TeamGroup {
  _FakeTeamGroup_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MainProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainProvider extends _i1.Mock implements _i4.MainProvider {
  MockMainProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: false,
      ) as bool);

  @override
  List<_i6.Dog> get dogs => (super.noSuchMethod(
        Invocation.getter(#dogs),
        returnValue: <_i6.Dog>[],
      ) as List<_i6.Dog>);

  @override
  Map<String, _i6.Dog> get dogsById => (super.noSuchMethod(
        Invocation.getter(#dogsById),
        returnValue: <String, _i6.Dog>{},
      ) as Map<String, _i6.Dog>);

  @override
  String get account => (super.noSuchMethod(
        Invocation.getter(#account),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#account),
        ),
      ) as String);

  @override
  _i2.SettingsModel get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettingsModel_0(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i2.SettingsModel);

  @override
  _i3.TasksInMemory get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: _FakeTasksInMemory_1(
          this,
          Invocation.getter(#tasks),
        ),
      ) as _i3.TasksInMemory);

  @override
  set loaded(bool? _loaded) => super.noSuchMethod(
        Invocation.setter(
          #loaded,
          _loaded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> addTask(_i3.Task? newTask) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [newTask],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteTask(String? tid) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [tid],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> editTask(_i3.Task? editedTask) => (super.noSuchMethod(
        Invocation.method(
          #editTask,
          [editedTask],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> fetchOlderTasks(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #fetchOlderTasks,
          [date],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CreateTeamProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTeamProvider extends _i1.Mock
    implements _i10.CreateTeamProvider {
  MockCreateTeamProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MainProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakeMainProvider_2(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i4.MainProvider);

  @override
  bool get unsavedData => (super.noSuchMethod(
        Invocation.getter(#unsavedData),
        returnValue: false,
      ) as bool);

  @override
  _i5.BasicLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeBasicLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.BasicLogger);

  @override
  bool get isFetchingDistance => (super.noSuchMethod(
        Invocation.getter(#isFetchingDistance),
        returnValue: false,
      ) as bool);

  @override
  List<_i11.DogNote> get dogNotes => (super.noSuchMethod(
        Invocation.getter(#dogNotes),
        returnValue: <_i11.DogNote>[],
      ) as List<_i11.DogNote>);

  @override
  List<String> get runningDogIds => (super.noSuchMethod(
        Invocation.getter(#runningDogIds),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i6.TeamGroup get group => (super.noSuchMethod(
        Invocation.getter(#group),
        returnValue: _FakeTeamGroup_4(
          this,
          Invocation.getter(#group),
        ),
      ) as _i6.TeamGroup);

  @override
  List<_i6.Dog> get dogs => (super.noSuchMethod(
        Invocation.getter(#dogs),
        returnValue: <_i6.Dog>[],
      ) as List<_i6.Dog>);

  @override
  Map<String, _i6.Dog> get dogsById => (super.noSuchMethod(
        Invocation.getter(#dogsById),
        returnValue: <String, _i6.Dog>{},
      ) as Map<String, _i6.Dog>);

  @override
  set unsavedData(bool? _unsavedData) => super.noSuchMethod(
        Invocation.setter(
          #unsavedData,
          _unsavedData,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set logger(_i5.BasicLogger? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isFetchingDistance(bool? _isFetchingDistance) => super.noSuchMethod(
        Invocation.setter(
          #isFetchingDistance,
          _isFetchingDistance,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dogNotes(List<_i11.DogNote>? _dogNotes) => super.noSuchMethod(
        Invocation.setter(
          #dogNotes,
          _dogNotes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set runningDogIds(List<String>? _runningDogIds) => super.noSuchMethod(
        Invocation.setter(
          #runningDogIds,
          _runningDogIds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set group(_i6.TeamGroup? _group) => super.noSuchMethod(
        Invocation.setter(
          #group,
          _group,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addDogNote(_i11.DogNote? newNote) => super.noSuchMethod(
        Invocation.method(
          #addDogNote,
          [newNote],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeGlobalName(String? newName) => super.noSuchMethod(
        Invocation.method(
          #changeGlobalName,
          [newName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeDistance(double? newDistance) => super.noSuchMethod(
        Invocation.method(
          #changeDistance,
          [newDistance],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeNotes(String? newNotes) => super.noSuchMethod(
        Invocation.method(
          #changeNotes,
          [newNotes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeAllTeams(List<_i6.Team>? newTeams) => super.noSuchMethod(
        Invocation.method(
          #changeAllTeams,
          [newTeams],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addTeam({required int? teamNumber}) => super.noSuchMethod(
        Invocation.method(
          #addTeam,
          [],
          {#teamNumber: teamNumber},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeTeam({required int? teamNumber}) => super.noSuchMethod(
        Invocation.method(
          #removeTeam,
          [],
          {#teamNumber: teamNumber},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeDate(DateTime? newDate) => super.noSuchMethod(
        Invocation.method(
          #changeDate,
          [newDate],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeTime(_i12.TimeOfDay? time) => super.noSuchMethod(
        Invocation.method(
          #changeTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeTeamName(
    int? teamNumber,
    String? newName,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #changeTeamName,
          [
            teamNumber,
            newName,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addRow({required int? teamNumber}) => super.noSuchMethod(
        Invocation.method(
          #addRow,
          [],
          {#teamNumber: teamNumber},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeRow({
    required int? teamNumber,
    required int? rowNumber,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRow,
          [],
          {
            #teamNumber: teamNumber,
            #rowNumber: rowNumber,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeDog({
    required String? newId,
    required int? teamNumber,
    required int? rowNumber,
    required int? dogPosition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeDog,
          [],
          {
            #newId: newId,
            #teamNumber: teamNumber,
            #rowNumber: rowNumber,
            #dogPosition: dogPosition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateDuplicateDogs() => super.noSuchMethod(
        Invocation.method(
          #updateDuplicateDogs,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String createTeamsString() => (super.noSuchMethod(
        Invocation.method(
          #createTeamsString,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #createTeamsString,
            [],
          ),
        ),
      ) as String);

  @override
  String stringifyTeam(_i6.Team? team) => (super.noSuchMethod(
        Invocation.method(
          #stringifyTeam,
          [team],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #stringifyTeam,
            [team],
          ),
        ),
      ) as String);

  @override
  String stringifyDogPairs(List<_i6.DogPair>? teamDogs) => (super.noSuchMethod(
        Invocation.method(
          #stringifyDogPairs,
          [teamDogs],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #stringifyDogPairs,
            [teamDogs],
          ),
        ),
      ) as String);

  @override
  void changeUnsavedData(bool? newCUD) => super.noSuchMethod(
        Invocation.method(
          #changeUnsavedData,
          [newCUD],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateRunningDogs() => super.noSuchMethod(
        Invocation.method(
          #updateRunningDogs,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addErrorToUnavailableDogs(List<_i6.Dog>? availableDogs) =>
      super.noSuchMethod(
        Invocation.method(
          #addErrorToUnavailableDogs,
          [availableDogs],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
